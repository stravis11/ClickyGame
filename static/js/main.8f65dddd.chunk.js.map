{"version":3,"sources":["components/Wrapper/Wrapper.js","components/Hero/index.js","components/Header/Header.js","components/ImageCard/ImageCard.js","components/Navbar/Navbar.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["Wrapper","props","react_default","a","createElement","className","children","Hero","Header","title","instructions","ImageCard","onClick","selectImage","id","alt","name","src","image","Navbar","msg","score","topScore","Footer","winScore","characters","length","App","state","currentScore","selectedImages","gameMsg","_this","includes","setState","resetGame","selected","push","shuffleImages","shuffledImages","shuffleArray","arr","i","j","Math","floor","random","_ref","_this2","this","components_Navbar_Navbar","components_Header_Header","components_Wrapper_Wrapper","map","character","components_ImageCard_ImageCard","key","components_Footer_Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8f65dddd.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Wrapper.css\";\r\n\r\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\r\n\r\nexport default Wrapper;\r\n","import React from \"react\";\nimport \"./style.css\";\n\nfunction Hero(props) {\n  return (\n    <div className=\"hero text-center\" style={{ backgroundImage: `url(${props.backgroundImage})` }}>\n      {props.children}\n    </div>\n  );\n}\n\nexport default Hero;\n","import React from \"react\";\r\nimport \"./Header.css\";\r\nimport Hero from \"../Hero\";\r\n\r\nconst Header = props => (\r\n  <div className=\"header\">\r\n    {/* <Hero backgroundImage=\"https://i.imgur.com/2ST6V90.png\"> */}\r\n    <h1>{props.title}</h1>\r\n    <h2>{props.instructions}</h2>\r\n    {/* </Hero> */}\r\n  </div>\r\n);\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./ImageCard.css\";\r\n\r\nconst ImageCard = props => (\r\n  <div className=\"card\">\r\n    <img\r\n      onClick={() => props.selectImage(props.id)}\r\n      className=\"card-img\"\r\n      alt={props.name}\r\n      src={props.image}\r\n    />\r\n  </div>\r\n);\r\n\r\nexport default ImageCard;\r\n","import React from \"react\";\r\nimport \"./Navbar.css\";\r\n\r\nconst Navbar = props => (\r\n  <nav className=\"navbar d-flex justify-content-between px-5\">\r\n    <span>{props.title}</span>\r\n    <span>{props.msg}</span>\r\n    <span>\r\n      Score: {props.score} | Top Score: {props.topScore}\r\n    </span>\r\n  </nav>\r\n);\r\n\r\nexport default Navbar;\r\n","import React from \"react\";\r\nimport \"./Footer.css\";\r\n\r\nconst Footer = props => (\r\n  <div className=\"footer\">\r\n    <p className=\"center\">{props.title} &copy;2019</p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React, { Component } from \"react\";\nimport Wrapper from \"./components/Wrapper\";\nimport Header from \"./components/Header\";\nimport ImageCard from \"./components/ImageCard\";\nimport Navbar from \"./components/Navbar\";\nimport Footer from \"./components/Footer\";\nimport characters from \"./characters.json\";\n\n// Set winning score\nconst winScore = characters.length;\n\nclass App extends Component {\n  // Set this.state.characters to the characters json array\n  state = {\n    characters,\n    currentScore: 0,\n    topScore: 0,\n    selectedImages: [],\n    gameMsg: \"Click a character to begin!\"\n  };\n\n  selectImage = id => {\n    // If image has already been selected then game ends\n    if (this.state.selectedImages.includes(id)) {\n      this.setState({ gameMsg: \"You lose. The Mind Flayer has won!\" });\n      this.resetGame();\n    }\n    // Else increment the score\n    else {\n      const score = this.state.currentScore + 1;\n\n      // Update topScore if currentScore is greater than current topScore\n      if (score > this.state.topScore) {\n        this.setState({ topScore: score });\n      }\n\n      // If selected all images without repeating, then user wins\n      if (score === winScore) {\n        this.setState({\n          gameMsg: \"Congratulations, you defeated the Mind Flayer!\"\n        });\n        this.resetGame();\n      }\n      // Add current image id to selectedImages array, update score, shuffle images and continue playing\n      else {\n        this.setState({ gameMsg: \"You guessed correctly!\" });\n        this.setState({ selected: this.state.selectedImages.push(id) });\n        this.setState({ currentScore: score });\n        this.shuffleImages();\n      }\n    }\n  };\n\n  shuffleImages = () => {\n    const shuffledImages = this.shuffleArray(characters);\n    this.setState({ characters: shuffledImages });\n  };\n\n  // Shuffle array\n  shuffleArray = arr => {\n    for (let i = arr.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [arr[i], arr[j]] = [arr[j], arr[i]];\n    }\n    return arr;\n  };\n\n  // Resets game parameters and shuffle images\n  resetGame = () => {\n    this.setState({ currentScore: 0 });\n    this.setState({ selectedImages: [] });\n    this.shuffleImages();\n  };\n\n  // Render the page\n  render() {\n    return (\n      <div className=\"App\">\n        <Navbar\n          title={\"Clicky Game\"}\n          msg={this.state.gameMsg}\n          score={this.state.currentScore}\n          topScore={this.state.topScore}\n        />\n        <Header\n        // title={\"Stranger Things Characters\"}\n        // instructions={\n        //   \"Test your memory. See how many times you can select a character only once!\"\n        // }\n        />\n\n        <Wrapper>\n          {characters.map(character => (\n            <ImageCard\n              key={character.id}\n              id={character.id}\n              name={character.name}\n              image={character.image}\n              selectImage={this.selectImage}\n            />\n          ))}\n        </Wrapper>\n        <Footer title={\"Stranger Things Clicky Game\"} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get(\"content-type\");\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}